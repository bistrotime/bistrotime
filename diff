diff --git a/api/package-lock.json b/api/package-lock.json
index 2f7da82..e08fce6 100644
--- a/api/package-lock.json
+++ b/api/package-lock.json
@@ -3721,6 +3721,15 @@
         }
       }
     },
+    "express-validator": {
+      "version": "5.3.1",
+      "resolved": "https://registry.npmjs.org/express-validator/-/express-validator-5.3.1.tgz",
+      "integrity": "sha512-g8xkipBF6VxHbO1+ksC7nxUU7+pWif0+OZXjZTybKJ/V0aTVhuCoHbyhIPgSYVldwQLocGExPtB2pE0DqK4jsw==",
+      "requires": {
+        "lodash": "^4.17.10",
+        "validator": "^10.4.0"
+      }
+    },
     "extend": {
       "version": "3.0.2",
       "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
@@ -7857,6 +7866,11 @@
         "spdx-expression-parse": "^3.0.0"
       }
     },
+    "validator": {
+      "version": "10.11.0",
+      "resolved": "https://registry.npmjs.org/validator/-/validator-10.11.0.tgz",
+      "integrity": "sha512-X/p3UZerAIsbBfN/IwahhYaBbY68EN/UQBWHtsbXGT5bfrH/p4NQzUCG1kF/rtKaNpnJ7jAu6NGTdSNtyNIXMw=="
+    },
     "vary": {
       "version": "1.1.2",
       "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
diff --git a/api/package.json b/api/package.json
index eacdc41..26dd7f8 100644
--- a/api/package.json
+++ b/api/package.json
@@ -16,6 +16,7 @@
     "cors": "~2.8.5",
     "dotenv": "~7.0.0",
     "express": "~4.16.4",
+    "express-validator": "^5.3.1",
     "helmet": "~3.16.0",
     "morgan": "~1.9.1",
     "request": "~2.88.0",
diff --git a/api/src/api/finder.js b/api/src/api/finder.js
index 1f8cdf4..2919978 100644
--- a/api/src/api/finder.js
+++ b/api/src/api/finder.js
@@ -1,21 +1,22 @@
 import { Router } from 'express';
-import * as turf from '@turf/turf';
+import { check, validationResult } from 'express-validator/check';
+import { getPoints } from '../utils/coordinates';
 import findBistro from '../bistrotime';
 
 const finder = Router();
 
-finder.get('/', (req, res) => {
+finder.get('/', [check('coords').exists()], (req, res) => {
+  const errors = validationResult(req);
+  if (!errors.isEmpty()) {
+    return res.status(422).json({ errors: errors.array() });
+  }
+
   const { coords } = req.query;
+  const points = getPoints(coords);
 
-  const points = [];
-  coords.forEach((coord) => {
-    try {
-      const point = turf.point(coord.split(',').map(l => parseFloat(l)));
-      points.push(point);
-    } catch (err) {
-      // noop
-    }
-  });
+  if (!points) {
+    return res.status(422).json({ error: 'Coordinates format error' });
+  }
 
   findBistro(points).then((bar) => {
     res.json({ bar });
diff --git a/api/src/utils/coordinates.js b/api/src/utils/coordinates.js
index c3ce5d1..16241cc 100644
--- a/api/src/utils/coordinates.js
+++ b/api/src/utils/coordinates.js
@@ -1,6 +1,25 @@
-import { getCoord } from '@turf/turf';
+import * as turf from '@turf/turf';
 
-export default function inline(point) {
-  const coord = getCoord(point);
+export function getPoints(coords) {
+  if (!Array.isArray(coords)) {
+    // eslint-disable-next-line no-param-reassign
+    coords = [coords];
+  }
+
+  const points = [];
+  coords.forEach((coord) => {
+    try {
+      const point = turf.point(coord.split(',').map(l => parseFloat(l)));
+      points.push(point);
+    } catch (err) {
+      // noop
+    }
+  });
+
+  return points;
+}
+
+export function inline(point) {
+  const coord = turf.getCoord(point);
   return `${coord[0]},${coord[1]}`;
 }
