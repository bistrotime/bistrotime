variables:
  NODE_VERSION: "11.14"
  HELM_VERSION: "2.13.1"

stages:
  - setup
  - test
  - build
  - deploy

setup:api:
  stage: setup
  image: node:$NODE_VERSION
  before_script:
    - cd api/
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - api/dist/
      - api/node_modules/
    expire_in: 1 hour

setup:web:
  stage: setup
  image: node:$NODE_VERSION
  before_script:
    - cd web/
  script:
    - npm install
    - npm run build
  artifacts:
    paths:
      - web/build/
      - web/node_modules/
    expire_in: 1 hour

lint:api:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - cd api/
  script:
    - npm run lint

lint:web:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - cd web/
  script:
    - npm run lint

test:api:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - cd api/
  script:
    - npm run test

test:web:
  stage: test
  image: node:$NODE_VERSION
  before_script:
    - cd web/
  script:
    - npm run test

build:api:
  stage: build
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - cd api/
    - echo "$GCR_API_KEY" | docker login --username _json_key --password-stdin https://eu.gcr.io
  script:
    - docker build -t bistrotime-api .
    - docker tag bistrotime-api eu.gcr.io/${GCP_PROJECT_ID}/bistrotime-api
    - docker push eu.gcr.io/${GCP_PROJECT_ID}/bistrotime-api
  only:
    - master

build:web:
  stage: build
  image: docker:stable
  variables:
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - cd web/
    - echo "$GCR_API_KEY" | docker login --username _json_key --password-stdin https://eu.gcr.io
    - echo "REACT_APP_MAPBOX_ACCESS_TOKEN=${MAPBOX_ACCESS_TOKEN}" > .env
    - echo "REACT_APP_BISTROTIME_API_URL=${BISTROTIME_API_URL}" > .env.production
  script:
    - docker build -t bistrotime-web .
    - docker tag bistrotime-web eu.gcr.io/${GCP_PROJECT_ID}/bistrotime-web
    - docker push eu.gcr.io/${GCP_PROJECT_ID}/bistrotime-web
  only:
    - master

deploy:api:
  stage: deploy
  image:
    name: linkyard/docker-helm:$HELM_VERSION
    entrypoint: ["/bin/sh", "-c"]
  dependencies: []
  before_script:
    - echo "$HELM_KUBECONFIG" | base64 -d > ~/helm.kubeconfig
    - helm init --kubeconfig ~/helm.kubeconfig --client-only
  script:
    - helm version
  only:
    - master
